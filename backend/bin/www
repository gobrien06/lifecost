#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var https = require('https');
require('dotenv').config({path: './.env'});

const fs = require('fs');

if(process.env.SSL_ON == 'true') {
    var privateKey  = fs.readFileSync(process.env.privkey, 'utf8');
    var certificate = fs.readFileSync(process.env.cert, 'utf8');
}

var portHTTP = normalizePort(process.env.PORT || '3000');
var serverHTTP = http.createServer(app);

serverHTTP.listen(portHTTP);


if(process.env.SSL_ON == 'true') {    
    var portHTTPS = normalizePort(process.env.PORT_HTTPS || '3080');    
    var serverHTTPS = ttps.createServer({key: privateKey, cert: certificate}, app);
        
    serverHTTPS.listen(portHTTPS);
    serverHTTPS.on('error', onError);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
